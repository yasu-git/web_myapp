name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main ブランチにプッシュされたら実行
  pull_request:
    branches:
      - main

jobs:
  # フロントエンド (Vue.js) のビルド
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 フロントエンドリポジトリのコードを取得
        uses: actions/checkout@v3
        with:
          repository: yasu-git/vue-frontend  # Vueのリポジトリ
          path: vue-frontend  # `vue-frontend` にクローン

      - name: 📂 ディレクトリ構成を確認
        run: ls -la vue-frontend

      - name: 🔧 Node.js のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'  # `yarn` のキャッシュを利用

      - name: 📦 Yarn をインストール
        run: npm install -g yarn  # `yarn` をグローバルにインストール

      - name: 📦 依存関係をインストール
        run: |
          cd vue-frontend
          yarn install --frozen-lockfile

      - name: 🏗️ Vue.js をビルド
        run: |
          cd vue-frontend
          yarn build

  # バックエンド (Express) のビルド
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 バックエンドリポジトリのコードを取得
        uses: actions/checkout@v3
        with:
          repository: yasu-git/web_myapp  # Expressのリポジトリ
          path: web_myapp  # `web_myapp` にクローン

      - name: 📂 ディレクトリ構成を確認
        run: ls -la web_myapp

      - name: 🔧 Node.js のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'  # `npm` のキャッシュを利用

      - name: 📦 依存関係をインストール
        run: |
          cd web_myapp
          npm ci  # `npm install` の代わりに `npm ci` を使ってクリーンインストール

      - name: ✅ Expressのテストを実行（ある場合）
        run: |
          cd web_myapp
          npm test || echo "No tests found, skipping..."

  # 🚀 デプロイ
  deploy:
    needs: [build-frontend, build-backend]  # フロントとバックのビルドが成功したら実行
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 SSH の設定
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key

      - name: 🚀 サーバーへデプロイ
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no user@${{ secrets.SERVER_IP }} /bin/bash -c "
            cd /home/user/myapp || exit 1
            git pull
            docker-compose ps  # 現在のコンテナの状態を確認
            docker-compose up -d --build"
